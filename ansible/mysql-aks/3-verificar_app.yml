- name: Verificar despliegue de MySQL en AKS
  hosts: localhost
  vars_files:
    - /home/beetlebum/cp2/ansible/secrets.yml  # Carga las variables sensibles desde un archivo encriptado con Ansible Vault
  collections:
    - kubernetes.core
    - community.mysql       # Requiere la colecci贸n community.mysql
  tasks:
    - name: Verificar los pods
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: default  # Cambia al namespace correcto si es necesario
      register: pod_info

    - name: Mostrar estado de los pods
      debug:
        msg: "Pods en ejecuci贸n: {{ pod_info.resources | json_query('[].metadata.name') }}"

    - name: Verificar los servicios
      kubernetes.core.k8s_info:
        kind: Service
        namespace: default  # Cambia al namespace correcto si es necesario
      register: service_info

    - name: Mostrar estado de los servicios
      debug:
        msg: "Servicios: {{ service_info.resources | json_query('[].metadata.name') }}"

    - name: Obtener la IP externa del servicio MySQL
      set_fact:
        mysql_ip: >-
          {{ service_info.resources | selectattr('metadata.name', 'eq', 'mysql-service') |
          map(attribute='status.loadBalancer.ingress') | first | default([]) |
          map(attribute='ip') | first | default('') }}

    - name: Mostrar la IP externa del servicio MySQL
      debug:
        msg: "La IP externa del servicio MySQL es: {{ mysql_ip if mysql_ip else 'No hay IP externa asignada' }}"

    - name: Probar conexi贸n a MySQL (si hay IP externa)
      community.mysql.mysql_query:
        login_host: "{{ mysql_ip }}"
        login_port: 3306
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_password }}"
        query: "SHOW DATABASES;"
      when: mysql_ip != ""
      register: mysql_connection
      ignore_errors: yes  # Ignora errores si la conexi贸n falla

    - name: Mostrar salida completa de mysql_connection
      debug:
        var: mysql_connection

#    - name: Mostrar bases de datos en MySQL
#      debug:
#        msg: >-
#          {% if mysql_connection is succeeded and mysql_connection.query_result %}
#            Bases de datos en MySQL: {{ mysql_connection.query_result | map(attribute='Database') | list }}
#          {% else %}
#            No se pudo conectar a MySQL o no hay bases de datos.
#          {% endif %}
